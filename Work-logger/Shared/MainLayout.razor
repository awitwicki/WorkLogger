@inherits LayoutComponentBase
@using WorkLogger.Pages.ServicePages
@inject IJSRuntime Js

<PageTitle>Work-logger</PageTitle>

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />
<MudDialogProvider />
<MudSnackbarProvider />

@if (_isThemeLoaded)
{
    <AuthorizeView>
        <Authorized>
            <MudLayout>
                <AuthorizeView Roles="@(Consts.AdminRole + ", " + Consts.ModeratorRole + ", " + Consts.UserRole)" Context="innerContext">
                    <Authorized>
                        <MudAppBar Elevation="1">
                            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(() => _drawerOpen = !_drawerOpen)"/>
                            @if (!_drawerOpen)
                            {
                                <MudText Typo="Typo.h6">Work logger</MudText>
                            }
                            <MudSpacer/>
                            <MudIconButton Icon="@ThemeBtnIcon" Color="Color.Inherit" OnClick="ToggleTheme"/>
                            <MudButton Href="/identity/account/logout"
                                       Variant="Variant.Text"
                                       StartIcon="@Icons.Material.Filled.Login"
                                       Color="Color.Inherit">
                                Logout
                            </MudButton>
                            <logincontrol/>
                        </MudAppBar>
                        
                        <MudDrawer @bind-Open="@_drawerOpen" Elevation="1">
                            <MudDrawerHeader>
                                <MudText Typo="Typo.h6">Work logger</MudText>
                            </MudDrawerHeader>
                            <NavMenu/>
                        </MudDrawer>
                        
                        <MudMainContent Class="pt-16 px-16">
                            <MudContainer Class="mt-6">
                                @Body
                            </MudContainer>
                        </MudMainContent>
                    </Authorized>
                    <NotAuthorized>
                        <MudMainContent>
                            <MudContainer>
                                <MudText Typo="Typo.h4">Contact to the admin</MudText>
                                <MudButton Href="/identity/account/logout"
                                        Variant="Variant.Outlined"
                                        StartIcon="@Icons.Material.Filled.Login"
                                        Color="Color.Inherit">
                                    Relogin
                                </MudButton>
                            </MudContainer>
                        </MudMainContent>
                    </NotAuthorized>
                </AuthorizeView>
            </MudLayout>
        </Authorized>
        <NotAuthorized>
            <RedirectToLogin/>
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    private readonly MudTheme _theme = new();
    private bool _isDarkMode;
    private bool _isThemeLoaded = false;

    bool _drawerOpen = true;
    
    string ThemeBtnIcon => _isDarkMode ? Icons.Material.Filled.Brightness4 : Icons.Material.Filled.Brightness5;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var isDarkModeStrFromLocalStorage = await Js.InvokeAsync<string>("readLocalStorage", "keyTheme");
            if (!string.IsNullOrEmpty(isDarkModeStrFromLocalStorage))
            {
                @if (isDarkModeStrFromLocalStorage == "true")
                {
                    _isDarkMode = true;
                }
            }
            
            _isThemeLoaded = true;
            StateHasChanged();
        }
    }

    private async Task ToggleTheme()
    {
        _isDarkMode = !_isDarkMode;
        await Js.InvokeVoidAsync("addToLocalStorage", "keyTheme", _isDarkMode);
    }
}
