@page "/user-month"

@attribute [Authorize(Roles = Consts.AdminRole + "," + Consts.ModeratorRole)]

@using WorkLogger.Domain.ViewModels
@using WorkLogger.Services.Services
@using WorkLogger.Domain.Services
@using WorkLogger.Pages.Shared
@using System.Security.Claims
@using WorkLogger.Common.AspExtensions

@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject IJSRuntime js
@inject IDialogService DialogService
@inject IUsersService UsersService
@inject IMonthDayService MonthDayService
@inject IPdfService PdfService

@if (_selectedUser == null)
{
    <MudGrid>
        @foreach (var user in _users)
        {
            <MudItem xs="4">
                <MudPaper>
                    <MudCardHeader>
                        <CardHeaderContent>
                            @if (user.EmployeeSettings == null)
                            {
                                <MudText Class="mt-4" Color="@Color.Error" Typo="Typo.h4">Settings is empty</MudText>
                            }
                            else
                            {
                                <MudText Typo="Typo.h6">@user.EmployeeSettings.FullName</MudText>
                            }
                            <MudText Typo="Typo.body1">@user.User.Email</MudText>
                            @foreach (var userRole in user.UserRoles)
                            {
                                <MudText Class="mr-1 rounded btn-outline-danger" Typo="Typo.overline">@userRole</MudText>
                            }
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid Spacing="2" Justify="Justify.FlexStart">
                            <MudItem>
                                <MudButton Variant="Variant.Filled"
                                           OnClick="@(() => AddUserRole(user.User.Id))"
                                           Color="Color.Primary">
                                Add role
                                </MudButton>
                            </MudItem>
                            @if (user.User.Id != User.GetUserId() || IsAdmin)
                            {
                                @if ((user.UserRoles.Contains(Consts.AdminRole) && IsAdmin) ||
                                     !user.UserRoles.Contains(Consts.AdminRole))
                                {
                                    <MudItem>
                                        <MudButton Variant="Variant.Filled"
                                                   OnClick="@(() => ClearUserRoles(user.User.Id))"
                                                   Color="Color.Error">
                                            Clear roles
                                        </MudButton>
                                    </MudItem>
                                }
                            }
                            <MudItem>
                                <MudButton Variant="Variant.Filled"
                                           EndIcon="@Icons.Material.Filled.CalendarMonth"
                                           OnClick="@(() => LoadUser(user))"
                                           Color="Color.Primary">
                                    User workdays
                                </MudButton>
                            </MudItem>
                            @if (user.User.Id != User.GetUserId())
                            {
                                <MudItem>
                                    <AuthorizeView Roles="@Consts.AdminRole" Context="innerContext">
                                        <Authorized>
                                            <MudButton Variant="Variant.Filled"
                                                       OnClick="@(() => RemoveUser(user.User.Id))"
                                                       Color="Color.Error">
                                                Remove user
                                            </MudButton>
                                        </Authorized>
                                    </AuthorizeView>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudCardContent>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
}
else
{
    @if (_selectedUser.SelectedMonth != null)
    {
        <div Class="d-flex justify-space-between flex-grow-1">
            <MudButton Class="my-4" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.AssignmentReturn" Color="Color.Error"
                               OnClick="@(() => _selectedUser.SelectedMonth = null)">
                        Return
                    </MudButton>
            <MudButton Class="my-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => BuildPdf(_selectedUser.SelectedMonth))">Export To PDF</MudButton>
        </div>

        <MudText Class="mt-4" Typo="Typo.h4">@_selectedUser.SelectedMonth.DateMonth.DateTime.ToString("MM.yyyy") @_selectedUser.User.EmployeeSettings.FullName</MudText>
        
        <MudTable Class="mt-4" Items="@_selectedUser.SelectedMonth.Days" Breakpoint="Breakpoint.Sm" Dense="@true"
                  Hover="@true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Working hours in month</MudText>
                <MudSpacer />
            </ToolBarContent>
            <ColGroup>
                <col style="width: auto;"/>
                <col style="width: auto;"/>
                <col style="width: auto;"/>
            </ColGroup>
            <HeaderContent>
                <MudTh>Date</MudTh>
                <MudTh>StartHour</MudTh>
                <MudTh>EndHour</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    @context.Date.Date.ToString("dd.MM.yy")
                    @if (context.Holiday != null)
                    {
                        <MudText Typo="Typo.body1" Color="@Color.Secondary">@context.Holiday.Name</MudText>
                    }
                    @if (context.IsL4)
                    {
                        <MudText Typo="Typo.body1" Color="@Color.Secondary">L4</MudText>
                    }
                    @if (context.IsVacation)
                    {
                        <MudText Typo="Typo.body1" Color="@Color.Success">Vacation</MudText>
                    }
                </MudTd>
                <MudTd>
                    @if (!(context.IsDayOff || context.IsVacation || context.IsL4))
                    {
                        <MudText Typo="Typo.body1">@context.StartHour?.ToString(@"hh\:mm")</MudText>
                    }
                </MudTd>
                <MudTd>
                    @if (!(context.IsDayOff || context.IsVacation || context.IsL4))
                    {
                        <MudText Typo="Typo.body1">@context.EndHour?.ToString(@"hh\:mm")</MudText>
                    }
                </MudTd>
            </RowTemplate>
            <EditButtonContent Context="button">
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction"/>
            </EditButtonContent>
        </MudTable>
        
        <div Class="d-flex justify-space-between flex-grow-1">
            <MudButton Class="my-4" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.AssignmentReturn" Color="Color.Error"
                       OnClick="@(() => _selectedUser.SelectedMonth = null)">
                Return
            </MudButton>
        </div>
    }
    else
    {
        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.AssignmentReturn" Color="Color.Error"
                   OnClick="@(() => _selectedUser = null)">
            Return
        </MudButton>

        if (_selectedUser?.User.EmployeeSettings == null)
        {
            <MudText Class="mt-4" Color="@Color.Error" Typo="Typo.h4">Settings is empty</MudText>
        }
        else
        {
            <MudText Class="mt-4" Typo="Typo.h4">@_selectedUser.User.EmployeeSettings.FullName</MudText>
        }
        <MudText Class="mt-4" Typo="Typo.body1">@_selectedUser.User.User.Email</MudText>
        
        @if (!_selectedUser.UserWorkMonths.Any())
        {
            <MudText Class="mt-4" Typo="Typo.h4">User hasn't provided any data yet :(</MudText>
        }
        
        <MudGrid Class="mt-4">
            @foreach (var month in _selectedUser.UserWorkMonths)
            {
                <MudItem xs="4">
                    <MudPaper>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@month.DateMonth.DateTime.ToString("MM.yyyy")</MudText>
                                <MudText Class="mx-1 rounded btn-outline-danger" Typo="Typo.overline">@month.Days.Count(x => !x.IsDayOff && !x.IsVacation) work days</MudText>
                                <MudText Class="mx-1 rounded btn-outline-danger" Typo="Typo.overline">@month.Days.Count(x => x.IsVacation) vacation days</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudButton Variant="Variant.Filled"
                                       EndIcon="@Icons.Material.Filled.CalendarMonth"
                                       Color="Color.Primary"
                                       OnClick="@(() => _selectedUser.SelectedMonth = month)">
                                User workdays
                            </MudButton>
                        </MudCardContent>
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>
    }
}

@code {
    ClaimsPrincipal User;
    bool IsAdmin;
    IEnumerable<UserViewModel> _users = new List<UserViewModel>();
    UserMonthsViewModel? _selectedUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        User = authState.User;
        IsAdmin = User.IsInRole(Consts.AdminRole);
        _users = await UsersService.GetUsers();
    }
    
    async Task LoadUser(UserViewModel user)
    {
        _selectedUser = new UserMonthsViewModel()
        {
            User = user,
            UserWorkMonths = await MonthDayService.GetUserMonths(user.User.Id)
        };
    }
    
    async Task AddUserRole(string userId)
    {
        var roles = await UsersService.GetAllRoles();
        var rolesStr = roles.Select(x => new SimpleSelectDialog.SimpleSelectDialogItem { Id = x.Id, Name = x.Name }).ToList();

        var parameters = new DialogParameters();

        parameters.Add("SelectLabelText", "Role");
        parameters.Add("ContentText", "Select user role ");
        parameters.Add("ButtonText", "Dodaj");
        parameters.Add("Color", Color.Success);
        parameters.Add("Items", rolesStr);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<SimpleSelectDialog>("Select Role", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled && (SimpleSelectDialog.SimpleSelectDialogItem)result.Data != null)
        {
            await UsersService.AddRoleToUser(userId, ((SimpleSelectDialog.SimpleSelectDialogItem)result.Data).Name);

            _users = await UsersService.GetUsers();
            
            StateHasChanged();
        }
    }
    
    async Task ClearUserRoles(string userId)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Confirm removing all user roles!");
        parameters.Add("ButtonText", "Remove");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<DeleteDialog>("Remove Role", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled && (bool)result.Data == true)
        {
            await UsersService.CleanUserRoles(userId);

            _users = await UsersService.GetUsers();
            
            StateHasChanged();
        }
    }
    
    async Task RemoveUser(string userId)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Confirm deleting User!");
        parameters.Add("ButtonText", "Remove");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<DeleteDialog>("Delete user", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && (bool)result.Data)
        {
            await UsersService.RemoveUser(userId);
            _users = await UsersService.GetUsers();
            StateHasChanged();
        }
    }
    
    private async Task BuildPdf(UserWorkMonthViewModel month)
    {
        var pdfBytes = PdfService.GeneratePdf(month);
        
        // Start download
        var fileName = $"Month_{month.DateMonth.Month}_{month.DateMonth.Year}.pdf";
        
        var pdfBase64 = Convert.ToBase64String(pdfBytes);
        
        await js.InvokeVoidAsync("jsSaveAsFile", fileName, pdfBase64);
    }
}
