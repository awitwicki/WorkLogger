@page "/"
@using WorkLogger.Domain.Entities
@using System.Security.Claims
@using WorkLogger.Domain.ViewModels
@using WorkLogger.Pages.Shared
@using WorkLogger.Services

@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IEmployeeSettingsService EmployeeSettingsService
@inject IMonthDayService MonthDayService
@inject IHolidayService HolidayService
@inject NavigationManager NavManager
@inject IVacationService vacationService 

@if (_settings == null)
{
    <MudText Typo="Typo.h6">Please provide additional information:</MudText>
    <MudGrid>
        <MudItem xs="6">
            <MudPaper Class="pa-4">
                <MudTextField @bind-Value="_fullName" Label="Full Name" Variant="Variant.Outlined"/>
                <MudDatePicker Class="my-2" @bind-Date="_contractStartedDate" Label="Contract started date"  Variant="Variant.Outlined"/>
                <MudNumericField @bind-Value="_vacationDaysGrantedPerYear" Min="0" Max="365" Label="Vacations on Uop per year" Variant="Variant.Outlined" />
                <MudButton Class="my-4" Variant="Variant.Filled" Color="Color.Success" OnClick="SaveSettings">Save</MudButton>
            </MudPaper>
        </MudItem>
    </MudGrid>
}
else
{
    <MudGrid Class="mt-2">
        <MudItem md="4" xs="12">
            <MudText Typo="Typo.h6">@_settings?.FullName</MudText>
            <MudText Typo="Typo.h6">Contract started date @_settings?.ContractStartedDate.Date.ToShortDateString()</MudText>
            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Edit" Color="Color.Primary"
                       OnClick="@(() => _settings = null)">
                Edit info
            </MudButton>
        </MudItem>
        <MudItem md="4" xs="12">
            <MudText Typo="Typo.h3" Color="Color.Success">@_vacationDaysUsedInCurrentYear</MudText>
            <MudText Typo="Typo.h6">vacation days left before @CalculateVacationDaysBeforeDateDate().ToShortDateString()</MudText>
        </MudItem>
    </MudGrid>
    
    <MudGrid Class="mt-2">
        <MudItem md="4" xs="12">
            <MudText Typo="Typo.h6">User months</MudText>
            @foreach (var month in _months.TakeLast(5))
            {
                <MudLink Href=@($"/month/{month.DateMonth.ToString("yyyy.MM")}")>
                    <MudAlert Severity="Severity.Success" Variant="Variant.Filled" Class="my-2">@month.DateMonth.Date.ToString("MM.yyyy")</MudAlert>
                </MudLink>
            }
            <MudLink Href="/month">
                <MudAlert Severity="Severity.Info" Variant="Variant.Filled" Class="my-2">Fill new month</MudAlert>
            </MudLink>
        </MudItem>
        <MudItem md="4" xs="12">
            <MudText Typo="Typo.h6">Near Holidays</MudText>
            @foreach (var holiday in _holidays)
            {
                <MudCard Class="my-1">
                    <MudCardContent>
                        <MudText>@holiday.DateDay.Date.ToString("dd.MM.yyyy")</MudText>
                        <MudText Typo="Typo.body2">@holiday.Name</MudText>
                    </MudCardContent>
                </MudCard>
            }
        </MudItem>
    </MudGrid>
}

@code {
    private UserWorkMonthViewModel? _monthWorkDay;
    private IEnumerable<UserWorkMonthViewModel> _months = new List<UserWorkMonthViewModel>();
    private IEnumerable<Holiday> _holidays;
    private EmployeeSettings? _settings;
    private long? _settingsId;
    
    private string _fullName { get; set; }
    private DateTime? _contractStartedDate { get; set; }
    private int _vacationDaysGrantedPerYear { get; set; } = 0;
    private int _vacationDaysUsedInCurrentYear { get; set; } = 0;
    
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }
    ClaimsPrincipal _user;
    string _userId = "";

    private async Task<int> CalculateVacationDaysBeforeDate()
    {
        var result = await vacationService.GetVacationDaysLeftForUser(_userId);
        return result;
    }
    
    private DateTime CalculateVacationDaysBeforeDateDate()
    {
        var contractSignetMonth = _settings?.ContractStartedDate.Date.Month;
        var contractSignetDay = _settings?.ContractStartedDate.Date.Day;

        var result = new DateTime(DateTime.UtcNow.Year, contractSignetMonth!.Value, contractSignetDay!.Value);

        if (DateTime.UtcNow > result)
            result = result.AddYears(1);

        return result;
    }
    protected override async Task OnInitializedAsync()
    {
        _user = (await AuthStat).User;
        
        // TODO:
        // Refactor to single method
        // Get user Id
        _userId = _user.Claims.First(x => x.Type == ClaimTypes.NameIdentifier).Value;
        _settings = await EmployeeSettingsService.GetEmployeeSettings(_userId);

        if (_settings == null)
        {
            NavManager.NavigateTo("/settings", true);
        }
        
        await InitFields();
    }

    private async Task InitFields()
    {
        if (_settings != null)
        {
            _fullName = _settings.FullName;
            _contractStartedDate = _settings.ContractStartedDate.Date;
            _vacationDaysGrantedPerYear = _settings.VacationDaysPerYear;
            _settingsId = _settings.Id;
            _monthWorkDay = await MonthDayService.GetMonth(DateTimeOffset.UtcNow, _userId);
            _months = await MonthDayService.GetUserMonths(_userId);
            _holidays = await HolidayService.GetHolidays(DateTimeOffset.UtcNow.AddDays(-10), DateTimeOffset.UtcNow.AddMonths(1));
            _vacationDaysUsedInCurrentYear = await vacationService.GetVacationDaysLeftForUser(_userId);
        }
    }
    
    private async Task SaveSettings()
    {
        if (_contractStartedDate.HasValue && !string.IsNullOrEmpty(_fullName))
        {
            var _employeeSettings = new EmployeeSettings
            {
                Id = _settingsId ?? 0,
                EmployeeId = _userId,
                FullName = _fullName,
                ContractStartedDate =  new DateTimeOffset(_contractStartedDate!.Value, TimeSpan.Zero),
                VacationDaysPerYear = _vacationDaysGrantedPerYear
            };

            await EmployeeSettingsService.SaveOrUpdateEmployeeSettings(_employeeSettings);
            
            _settings = _employeeSettings;
            
            Snackbar.Add("Settings saved");
            await InitFields();
        }
        else
        {
            DialogService.Show<InfoDialog>("Please Fill all fields");
        }
    }
}
