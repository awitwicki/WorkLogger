@page "/month/{date?}"

@using WorkLogger.Domain.ViewModels
@using WorkLogger.Domain.Services
@using System.Security.Claims
@using WorkLogger.Pages.Shared
@using WorkLogger.Services.Services
@using System.Globalization

@inject IJSRuntime js
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IMonthDayService MonthDayService
@inject IPdfService PdfService

@if (_workDays == null)
{
    <MudDatePicker Class="my-2" @bind-Date="_selectedMonth" Label="Select month" Variant="Variant.Outlined"/>
    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="GenerateMonth">Open or create new month record</MudButton>
}
else
{
    <MudTable Items="@_workDays" Loading="@(_workDays == null)" Breakpoint="Breakpoint.Sm" Dense="@true" Hover="@true"
              OnCommitEditClick="@(() => Snackbar.Add("Saved"))" IsEditRowSwitchingBlocked="@true"
              EditTrigger="TableEditTrigger.EditButton">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Working hours in month @GetMonthString()</MudText>
            <MudSpacer/>
            <MudButton Class="my-4" Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => _workDays = null)">Discard</MudButton>
        </ToolBarContent>
        <ColGroup>
            <col style="width: auto;"/>
            <col style="width: auto;"/>
            <col style="width: auto;"/>
            <col style="width: 60px;"/>
            <col style="width: 60px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh>Date</MudTh>
            <MudTh>StartHour</MudTh>
            <MudTh>EndHour</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                <MudText Typo="Typo.body1">@context.Date.Date.ToString("dd.MM.yy")</MudText>
                @if (context.Holiday != null)
                {
                    <MudText Typo="Typo.body1" Color="@Color.Secondary">@context.Holiday.Name</MudText>
                }
                @if (context.IsL4)
                {
                    <MudText Typo="Typo.body1" Color="@Color.Secondary">L4</MudText>
                }
                @if (context.IsVacation)
                {
                    <MudText Typo="Typo.body1" Color="@Color.Success">Vacation</MudText>
                }
            </MudTd>
            <MudTd>
                @if (!context.IsDisabled)
                {
                    <MudText Typo="Typo.body1">@context.StartHour?.ToString(@"hh\:mm")</MudText>
                }
            </MudTd>
            <MudTd>
                @if (!context.IsDisabled)
                {
                    <MudText Typo="Typo.body1">@context.EndHour?.ToString(@"hh\:mm")</MudText>
                }
            </MudTd>
            <MudTd>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.HolidayVillage" Class="pa-0" OnClick="@(() => ToggleVacation(context))"/>
            </MudTd>
        </RowTemplate>
        <RowEditingTemplate>
            <MudTd>@context.Date.Date.ToShortDateString()
                @if (!context.IsDayOff && !context.IsL4)
                {
                    <MudCheckBox Label="Vacation" Class="my-2" @bind-Checked="@context.IsVacation" Color="Color.Primary" UnCheckedColor="Color.Default"></MudCheckBox>
                }
                @if (!context.IsVacation && !context.IsL4)
                {
                    <MudCheckBox Label="Holiday" Class="my-2" @bind-Checked="@context.IsDayOff" Color="Color.Primary" UnCheckedColor="Color.Default"></MudCheckBox>
                }
                @if (!context.IsDayOff && !context.IsVacation)
                {
                    <MudCheckBox Label="L4" Class="my-2" @bind-Checked="@context.IsL4" Color="Color.Primary" UnCheckedColor="Color.Default"></MudCheckBox>
                }
            </MudTd>
            <MudTd>
                <MudTimePicker Label="StartHour" Editable="true" TimeEditMode="TimeEditMode.OnlyHours" @bind-Time="context.StartHour" Disabled="@context.IsDisabled"/>
            </MudTd>
            <MudTd>
                <MudTimePicker Label="EndHour" Editable="true" TimeEditMode="TimeEditMode.OnlyHours" @bind-Time="context.EndHour" Disabled="@context.IsDisabled"/>
            </MudTd>
        </RowEditingTemplate>
        <EditButtonContent Context="button">
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction"/>
        </EditButtonContent>
    </MudTable>

    <div Class="d-flex justify-space-between flex-grow-1">
        <MudButton Class="my-4" Variant="Variant.Filled" Color="Color.Success" OnClick="BuildPdf">Generate Pdf</MudButton>
        <MudButton Class="my-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="Save">Save</MudButton>
    </div>
}

@code {
    
    private DateTime? _selectedMonth { get; set; }
    private IEnumerable<WorkDayViewModel>? _workDays;
    
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }
    ClaimsPrincipal _user;
    string _userId = "";

    [Parameter]
    public string? Date { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        _user = (await AuthStat).User;
        _userId = _user.Claims.First(x => x.Type == ClaimTypes.NameIdentifier).Value;

        if (!string.IsNullOrEmpty(Date))
        {
            if (DateTime.TryParseExact(Date, "yyyy.MM", CultureInfo.InvariantCulture, DateTimeStyles.None, out var result))
            {
                _selectedMonth = result;
                await GenerateMonth();
            }
            else
            {
                _selectedMonth = GetNowMonthTruncated();
            }
        }
        else
        {
            _selectedMonth = GetNowMonthTruncated();
        }
    }
    
    private async Task Save()
    {
        await MonthDayService.SaveMonth(_workDays!, _selectedMonth.Value, _userId);

        Snackbar.Add("Month working hours saved");
    }

    private void ToggleVacation(WorkDayViewModel model)
    {
        if (!model.IsVacation)
        {
            model.IsVacation = true;
            model.IsL4 = false;
            model.IsDayOff = false;
        }
        else
        {
            model.IsVacation = false;
        }
        
        StateHasChanged();
    }
    
    private async Task BuildPdf()
    {
        try
        {
            var month = await MonthDayService.GetMonth(_selectedMonth.Value, _userId);

            var pdfBytes = PdfService.GeneratePdf(month);

            // Start download
            var fileName = $"Month_{_selectedMonth.Value.Month}_{_selectedMonth.Value.Year}.pdf";

            var pdfBase64 = Convert.ToBase64String(pdfBytes);

            await js.InvokeVoidAsync("jsSaveAsFile", fileName, pdfBase64);

            Snackbar.Add("Month working hours saved");
        }
        catch (Exception e)
        {
            await DialogService.ShowAsync<InfoDialog>(e.ToString());
        }
    }

    private async Task GenerateMonth()
    {
        _workDays = await MonthDayService.GetDaysInMonth(_selectedMonth.Value, _userId);
        
        if (_workDays == null)
            _workDays = await MonthDayService.BuildMonth(new DateTimeOffset(_selectedMonth.Value, TimeSpan.Zero));
    }

    private DateTime GetNowMonthTruncated()
    {
        var date = DateTime.UtcNow;
        date = new DateTime(date.Year, date.Month, 1, 0, 0, 0);
        
        return date;
    }
    
    private string GetMonthString()
    {
        var date = new DateTime(_selectedMonth.Value.Year, _selectedMonth.Value.Month, 1, 0, 0, 0);
        return date.ToString("MM.yyyy");
    }
}
