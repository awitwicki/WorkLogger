@page "/month"

@attribute [Authorize(Roles = Consts.AdminRole + "," + Consts.UserRole + "," + Consts.ModeratorRole)]

@using WorkLogger.Domain.ViewModels
@using WorkLogger.Domain.Services
@using System.Security.Claims
@inject ISnackbar Snackbar
@inject IMonthDayService MonthDayService

<MudTable Items="@_workDays" Loading="@(_workDays == null)" Breakpoint="Breakpoint.Sm" Dense="@true" Hover="@true"
          OnCommitEditClick="@(() => Snackbar.Add("Saved"))" IsEditRowSwitchingBlocked="@true"
          EditTrigger="TableEditTrigger.EditButton">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Working hours in month</MudText>
        <MudSpacer />
    </ToolBarContent>
    <ColGroup>
            <col style="width: 60px;"/>
            <col style="width: auto;"/>
            <col style="width: auto;"/>
            <col style="width: 60px;"/>
        </ColGroup>
    <HeaderContent>
        <MudTh>Date</MudTh>
        <MudTh>StartHour</MudTh>
        <MudTh>EndHour</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Date.Date.ToShortDateString()</MudTd>
        <MudTd>
            @if (!context.IsDisabled)
            {
                <MudText Typo="Typo.body1">@context.StartHour?.ToString(@"hh\:mm")</MudText>
            }
        </MudTd>
        <MudTd>
            @if (!context.IsDisabled)
            {
                <MudText Typo="Typo.body1">@context.EndHour?.ToString(@"hh\:mm")</MudText>
            }
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd>@context.Date.Date.ToShortDateString()
            @if (!context.IsDayOff)
            {
                <MudCheckBox Label="Vacation" @bind-Checked="@context.IsVacation" Color="Color.Primary" UnCheckedColor="Color.Default"></MudCheckBox>
            }
            @if (!context.IsVacation)
            {
                <MudCheckBox Label="Holiday" @bind-Checked="@context.IsDayOff" Color="Color.Primary" UnCheckedColor="Color.Default"></MudCheckBox>
            }
        </MudTd>
        <MudTd>
            <MudTimePicker Label="StartHour" Editable="true" TimeEditMode="TimeEditMode.OnlyHours" @bind-Time="context.StartHour" Disabled="@context.IsDisabled"/>
        </MudTd>
        <MudTd>
            <MudTimePicker Label="EndHour" Editable="true" TimeEditMode="TimeEditMode.OnlyHours" @bind-Time="context.EndHour" Disabled="@context.IsDisabled"/>
        </MudTd>
    </RowEditingTemplate>
    <EditButtonContent Context="button">
           <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction"/>
    </EditButtonContent>
</MudTable>

<div Class="d-flex justify-end flex-grow-1">
    <MudButton Class="my-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="Save">Save</MudButton>
</div>

@code {
    private IEnumerable<MonthDayFormItem>? _workDays;
    
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }
    ClaimsPrincipal _user;
    string _userId = "";

    protected override async Task OnInitializedAsync()
    {
        _user = (await AuthStat).User;
        
        // TODO:
        // Refactor to single method
        // Get user Id
        _userId = _user.Claims.First(x => x.Type == ClaimTypes.NameIdentifier).Value;
        
        _workDays = await MonthDayService.GetMonth(DateTimeOffset.UtcNow, _userId);
    }
    
    private async Task Save()
    {
        await MonthDayService.SaveMonth(_workDays!, DateTimeOffset.UtcNow, _userId);

        Snackbar.Add("Month working hours saved");
    }
}
