@page "/holidays"

@attribute [Authorize(Roles = Consts.AdminRole + "," + Consts.ModeratorRole)]

@using System.Security.Claims
@using WorkLogger.Common
@using WorkLogger.Common.DateExtensions
@using WorkLogger.Domain.Entities
@using WorkLogger.Pages.Shared
@using WorkLogger.Services

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IHolidayService HolidayService

<MudGrid>
    <MudItem xs="6">
        <MudTable Items="@_holidays" Loading="@(_holidays == null)" Dense="@true" Hover="@true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Holidays</MudText>
                <MudSpacer/>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Date</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Remove</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    @context.DateDay.ToString("dd.MM.yy")
                </MudTd>
                <MudTd>
                    @context.Name
                </MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"
                                   OnClick="@(() => RemoveHoliday(context))"/>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudItem>
    <MudItem xs="6">
        <MudPaper Class="pa-4">
            <MudText Class="mt-4" Typo="Typo.h6">Add new holiday:</MudText>
            <MudDatePicker Class="my-2" @bind-Date="_selectedDate" Label="Select date" Variant="Variant.Outlined"/>
            <MudTextField @bind-Value="_holidayName" Label="Holiday name" Variant="Variant.Outlined"/>
            <MudButton Class="my-4" Variant="Variant.Filled" Color="Color.Success" OnClick="AddHoliday" Disabled="@(_holidays == null)">Add holiday</MudButton>
            <MudDivider />
            <MudText Class="mt-4" Typo="Typo.h6">Synchronize holidays</MudText>
            <MudButton Class="my-4" Variant="Variant.Filled" Color="Color.Success" OnClick="AddHolidays2024" Disabled="@(_holidays == null)">Add 2024 holidays</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private DateTime? _selectedDate { get; set; } = DateTime.Today;
    private string _holidayName { get; set; }
    private IEnumerable<Holiday>? _holidays;
    
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }
    ClaimsPrincipal _user;
    string _userId = "";

    protected override async Task OnInitializedAsync()
    {
        _holidays = await HolidayService.GetHolidays();
    }

    private async Task ReloadView()
    {
        _holidays = await HolidayService.GetHolidays();
        
        StateHasChanged();
    }

    private async Task AddHoliday()
    {
        if (_holidays!.Any(x => x.DateDay.ToDateOnly() == new DateTimeOffset(_selectedDate!.Value).ToDateOnly()))
        {
            await DialogService.ShowAsync<InfoDialog>("That date already exists");
            return;
        }
        
        if (string.IsNullOrEmpty(_holidayName))
        {
            await DialogService.ShowAsync<InfoDialog>("Please Fill holiday name");
            return;
        }
        
        await HolidayService.AddHoliday(_selectedDate!.Value.ToDateOnly(), _holidayName);
        
        await ReloadView();
        Snackbar.Add("Saved");
    }

    private async Task AddHolidays2024()
    {
        var holidaysToAdd = HolidaysHelpers.GetHolidays2024();

        await HolidayService.ImportHolidays(holidaysToAdd);
        
        await ReloadView();

        Snackbar.Add("Holidays for 2024 are synchronized");
    }

    public async Task RemoveHoliday(Holiday holiday)
    {
        await HolidayService.RemoveHoliday(holiday.DateDay.ToDateOnly());

        await ReloadView();
     
        Snackbar.Add("Removed");
    }

    private DateTime GetNowMonthTruncated()
    {
        var date = DateTime.UtcNow;
        date = new DateTime(date.Year, date.Month, 1, 0, 0, 0);
        
        return date;
    }
    
    private string GetNowMonthString()
    {
        var date = DateTimeOffset.UtcNow;
        date = new DateTime(date.Year, date.Month, 1, 0, 0, 0);
        
        return date.ToString("MM.yyyy");
    }
}
